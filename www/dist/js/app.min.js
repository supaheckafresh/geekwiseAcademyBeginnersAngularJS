"use strict";!function(o){var t={title:"Angular Exercises / Reservation Application",version:.9,author:"Josh R. Dunlavy",fetchRestUrl:function(o){if(o){var t="https://confdeconflictor.firebaseio.com/",e=".json";return t+o+e}}};o.module("application",["ngRoute"]).constant("settings",t).config(["$locationProvider","$routeProvider",function(o,t){o.html5Mode(!0),t.when("/exercise1",{templateUrl:"/www/app/partials/exercise1.partial.htm",controller:"exercise1Controller",controllerAs:"vm"}).when("/exercise2",{templateUrl:"/www/app/partials/exercise2.partial.htm",controller:"exercise2Controller",controllerAs:"vm"}).when("/room/:id",{template:"<room></room>"}).otherwise({templateUrl:"/www/app/partials/welcome.partial.htm",controller:"welcomeController",controllerAs:"vm"})}])}(window.angular),function(o){o.module("application").factory("loginService",["$http","$timeout","settings","roomsService",function(o,t,e,n){function r(r){if(m=!0,u=r,r&&!r.displayName){e.fetchRestUrl("/rooms");o.get(e.fetchRestUrl("users/"+r.email.replace(".","_").toLowerCase())).then(function(o){console.log("Setting logged in user from Firebase database after login"),u=o.data,console.log("User fetched from database is",u,o)})}t(function(){n.initializeRoomsFromFirebase(),m=!1,console.log("Logged in user set: ",r)},2e3)}function i(o,t){return m=!0,firebase.auth().signInWithEmailAndPassword(o,t)}function l(){return m=!0,firebase.auth().signInWithPopup(new firebase.auth.GithubAuthProvider)}function a(){return m=!0,firebase.auth().signOut()}function c(){return u}function s(){return m}var u=null,m=!0;return firebase.auth().onAuthStateChanged(r),{login:i,gitLogin:l,logout:a,fetchLoggedInUser:c,fetchIsLoginBusy:s,updateLoginStatus:r}}])}(window.angular);var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o};!function(o){o.module("application").factory("modalService",["$q","settings",function(o,t){function e(e){l.message="Login to "+t.title,l.buttonObj1=null,l.buttonObj2={text:"Login",callback:o.when(e)},l.isLogin=!0}function n(e){l.message="Register for "+t.title,l.buttonObj1=null,l.buttonObj2={text:"Register",callback:o.when(e)},l.isRegister=!0}function r(o,t,e){var n="You didn't use me right";if(t&&"object"!==("undefined"==typeof t?"undefined":_typeof(t)))throw new Error(n);if(e&&"object"!==("undefined"==typeof e?"undefined":_typeof(e)))throw new Error(n);l.message=o,l.buttonObj1=t,l.buttonObj2=e,l.isPrompt=!0}function i(){delete l.buttonObj1,delete l.buttonObj2,l.isLogin=!1,l.isRegister=!1,l.isPrompt=!1,l.message=null}var l={isLogin:!1,isRegister:!1,isPrompt:!1};return{modal:l,showLogin:e,showRegister:n,showPrompt:r,close:i}}])}(window.angular),function(o){o.module("application").factory("navigationService",["$route",function(t){function e(){console.log('Building routes from service "navigationService"');var e=[];return o.forEach(t.routes,function(o){if(!o.redirectTo&&o.controller){var t={url:o.originalPath||"/",name:o.controller.replace(/controller/gi,"")};e.push(t)}}),n("welcome",e)}function n(o,t){return console.log('Arranging "'+o+'" to beginning of routes list'),t.forEach(function(e,n){e.name&&e.name.toLowerCase()===o.toLowerCase()&&(t.splice(n,1),t.splice(0,0,e))}),t}var r=e();return{applicationAngularRoutes:r}}])}(window.angular),function(o){o.module("application").factory("roomsService",["$q","$http",function(o,t){function e(){return r=null,o.when(firebase.database().ref("/rooms/").once("value")).then(function(o){o=o.val?o.val():o.data,console.log(o.length+" rooms fetched from Firebase database"),r=o})}function n(){return r}var r=null;return{initializeRoomsFromFirebase:e,returnFetchedRooms:n}}])}(window.angular),function(o){o.module("application").factory("registerService",["$http","settings","loginService",function(o,t,e){function n(o,t){return console.log("Register user entity: ",o),r(o,t).then(i).then(l)}function r(o,t){return firebase.auth().createUserWithEmailAndPassword(o.email,t).then(function(){return o})}function i(e){return o({url:t.fetchRestUrl("users/"+e.email.replace(".","_").toLowerCase()),method:"PUT",data:e})}function l(o){return e.updateLoginStatus(o.data),o.data}return{register:n}}])}(window.angular),function(o){o.module("application").controller("exercise1Controller",["modalService",function(o){function t(){this.rollButtonText="I changed because you pressed alert",alert("Showing alert!")}function e(){var o=n.possibleColors[Math.floor(Math.random()*n.possibleColors.length)];return o.hex}var n=this;this.showPrompt=function(){o.showPrompt("This is our first test",{text:"Show Alert",callback:t.bind(this)},{text:"Be Quiet"})},function(o){alert(o)}("yes"),this.title="exercise title",this.rollButtonText="Roll Me",this.lastObjectClickedText=null,this.possibleColors=[{name:"Brown",hex:"#A52A2A"},{name:"Blue",hex:"#0000FF"},{name:"Gainsboro",hex:"#DCDCDC"}],this.controllerInitializedObject={name:"Object 1",clickCount:0,color:e()},this.objectArray=[this.controllerInitializedObject],this.rollMethod=function(){this.rollButtonText="I'm Rolled"},this.addNewObject=function(){var o={name:"Object "+(this.objectArray.length+1),clickCount:0,color:e()};this.objectArray.push(o)},this.objectClicked=function(o){o.clickCount++,this.lastObjectClickedText=o.name+" clicked "+o.clickCount+" times",console.log(this.lastObjectClickedText)},this.clearColorFilter=function(){null===this.filter.color&&delete this.filter.color}}])}(window.angular),function(o){o.module("application").controller("exercise2Controller",function(){this.submit=function(){alert("Form submitted")}})}(window.angular),function(o){o.module("application").controller("welcomeController",function(){})}(window.angular),function(o){o.module("application").controller("modalController",["modalService",function(o){this.$onInit=function(){this.close=o.close,this.modal=o.modal,this.isShowingModal=function(){return o.modal.isLogin||o.modal.isRegister||o.modal.isPrompt}}}])}(window.angular),function(o){o.module("application").component("homemadeModal",{templateUrl:"www/app/components/homemadeModal/modal.htm",controller:"modalController",controllerAs:"vm",transclude:!0})}(window.angular),function(o){o.module("application").controller("navigationController",["navigationService",function(o){this.navigation=o.applicationAngularRoutes}])}(window.angular),function(o){o.module("application").component("navigation",{templateUrl:"www/app/components/navigation/navigation.htm",controller:"navigationController",controllerAs:"vm"})}(window.angular),function(o){o.module("application").controller("roomController",["$routeParams","$http",function(o,t){this.$onInit=function(){this.parameters=o,this.roomId=o.id}}])}(window.angular),function(o){o.module("application").component("room",{templateUrl:"www/app/components/room/room.htm",controller:"roomController",controllerAs:"vm"})}(window.angular),function(o){o.module("application").controller("roomsController",["roomsService",function(o){this.$onInit=function(){this.returnFetchedRooms=o.returnFetchedRooms}}])}(window.angular),function(o){o.module("application").component("rooms",{templateUrl:"www/app/components/rooms/rooms.htm",controller:"roomsController",controllerAs:"vm",transclude:!0})}(window.angular),function(o){o.module("application").controller("loggedInUserController",["settings","modalService","loginService",function(o,t,e){this.$onInit=function(){this.applicationLabel=o.title+" v."+o.version,this.fetchLoggedInUser=e.fetchLoggedInUser,this.fetchIsLoginBusy=e.fetchIsLoginBusy,this.logout=e.logout,this.showLogin=t.showLogin,this.showRegister=t.showRegister,this.logoutPrompt=function(){t.showPrompt("Are you sure you want to log out?",{text:"NO, PLEASE DON'T"},{text:"DO IT!  DO IT!",callback:this.logout})}}}])}(window.angular),function(o){o.module("application").component("loggedInUser",{templateUrl:"www/app/components/loggedInUser/loggedInUser.htm",controller:"loggedInUserController",controllerAs:"vm"})}(window.angular),function(o){o.module("application").controller("modalLoginController",["$scope","loginService",function(o,t){this.$onInit=function(){var e=this;this._processError=function(t){e.error=t,o.$apply()},this._processSuccess=function(){e.closeModal(),o.$apply()},this.login=function(o,n){return t.login(o,n).then(e._processSuccess).catch(e._processError)},this.gitLogin=function(){return t.gitLogin().then(e._processSuccess).catch(e._processError)},this.closeModal=function(){e.modal.close(),e.loginform.controls={},e.loginform.$setPristine(),e.error=null}}}])}(window.angular),function(o){o.module("application").component("modalLogin",{require:{modal:"^homemadeModal"},templateUrl:"www/app/components/homemadeModal/modalLogin/modalLogin.htm",controller:"modalLoginController",controllerAs:"vm"})}(window.angular),function(o){o.module("application").controller("modalPromptController",function(){this.$onInit=function(){this.close=this.modal.close,this.modal=this.modal.modal}})}(window.angular),function(o){o.module("application").component("modalPrompt",{require:{modal:"^homemadeModal"},templateUrl:"www/app/components/homemadeModal/modalPrompt/modalPrompt.htm",controller:"modalPromptController",controllerAs:"vm"})}(window.angular),function(o){o.module("application").controller("modalRegisterController",["$scope","registerService",function(o,t){this.$onInit=function(){var e=this;this._processError=function(t){e.error=t,o.$apply()},this._processSuccess=function(t){e.closeModal(),o.$apply()},this.register=function(o,n){return t.register(o,n).then(e._processSuccess).catch(e._processError)},this.closeModal=function(){e.modal.close(),e.registerform.controls={},e.registerform.$setPristine(),e.error=null}}}])}(window.angular),function(o){o.module("application").component("modalRegister",{require:{modal:"^homemadeModal"},templateUrl:"www/app/components/homemadeModal/modalRegister/modalRegister.htm",controller:"modalRegisterController",controllerAs:"vm"})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
